const Product = require("../models/ProductModel");
const recordsPerPage = require("../config/pagination");

const getProducts = async (req, res, next) => {
  try {
    //Product.create({ name: "Console" });
    //res.send("Handling product routes, e.g. search for products");
    // 1 => asc order
    // -1 => desc order
    // Returns the number of current page
    const pageNum = Number(req.query.pageNum) || 1;
    //res.json({ pageNum });
    //Get total count of product in the DB
    //const totalProducts = await Product.countDocuments({});
    //res.json({ totalProducts });

    //Filtering
    let query = {};
    let = priceQueryCondition = {};
    let rateingQueryCondition = {};
    let queryCondition = false;

    if (req.query.price) {
      queryCondition = true;
      priceQueryCondition = { price: { $lte: Number(req.query.price) } };
    }
    if (req.query.rating) {
      queryCondition = true;
      rateingQueryCondition = { rating: { $in: req.query.rating.split(",") } };
    }

    //Searching Product By Category Name
    let categoryQueryCondition = {};
    const categoryName = req.params.categoryName || "";
    if (categoryName) {
      queryCondition = true;
      let a = categoryName.replaceAll(",", "/");
      var regEx = new RegExp("^" + a);
      //replace / in category name with , to get valid path
      categoryQueryCondition = { category: regEx };
    }

    //Search by filter on products list
    if (req.query.category) {
      queryCondition = true;
      //get all category and sperate by , to get array of categories
      let a = req.query.category.split(",").map((item) => {
        if (item) {
          return new RegExp("^" + item);
        }
      });
      //overwrite value of categoryName
      categoryQueryCondition = { category: { $in: a } };
    }
    //Filter by attributes, attribucts may have multiple values so we use array this time
    let attrsQueryCondition = [];
    if (req.query.attrs) {
      //attrs : RAM-1TB-2TB-4TB,color-red-blue
      //first emeneat key followed by vlaue and seprate by , for different attributes
      //['RAM-1TB-2TB', 'color-red-blue', ''];
      attrsQueryCondition = req.query.attrs.split(",").reduce((acc, item) => {
        if (item) {
          //Seprate the values by "-"
          let a = item.split("-");
          let values = [...a];
          //Remove First item / key
          values.shift();
          //key like query params and values like values
          let a1 = {
            attrs: {
              $elemMatch: {
                key: a[0],
                value: { $in: values },
              },
            },
          };
          acc.push(a1);
          //to see the value of objects in console
          console.dir(acc, { depth: null });
          return acc;
        } else {
          return acc;
        }
      }, []);
    }

    // dynamic sort by name , price, rating etc.
    let sort = {};
    const sortOptions = req.query.sort || "";
    if (sortOptions) {
      //seprate key and value request from request ex: price_1, "price", "1"
      let sortOpt = sortOptions.split("_");
      //dynamic key value pair
      sort = { [sortOpt[0]]: Number(sortOpt[1]) };
      console.log(sort);
    }

    //Searching by Products
    const searchQuery = req.params.searchQuery || "";
    let searchQueryCondition = {};
    let select = {};
    if (searchQuery) {
      queryCondition = true;
      searchQueryCondition = { $text: { $search: searchQuery } };
      console.log(searchQueryCondition);
      //Accyracy of search result
      select = {
        score: { $meta: "textScore" },
      };
      sort = { score: { $meta: "textScore" } };
    }

    //Combine Filter Results
    if (queryCondition) {
      query = {
        $and: [
          priceQueryCondition,
          rateingQueryCondition,
          categoryQueryCondition,
          searchQueryCondition,
          ...attrsQueryCondition,
        ],
      };
    }
    const totalProducts = await Product.countDocuments(query);
    const products = await Product.find(query)
      .select(select)
      .skip(recordsPerPage * (pageNum - 1))
      .sort(sort)
      .limit(recordsPerPage);
    res.json({
      products,
      pageNum,
      pagenationLinkNumber: Math.ceil(totalProducts / recordsPerPage),
    });
  } catch (error) {
    console.log(error);
    next(error);
  }
};

module.exports = getProducts;
